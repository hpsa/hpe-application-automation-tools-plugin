<!--
 ~ Certain versions of software accessible here may contain branding from Hewlett-Packard Company (now HP Inc.) and Hewlett Packard Enterprise Company.
 ~ This software was acquired by Micro Focus on September 1, 2017, and is now offered by OpenText.
 ~ Any reference to the HP and Hewlett Packard Enterprise/HPE marks is historical in nature, and the HP and Hewlett Packard Enterprise/HPE marks are the property of their respective owners.
 ~ __________________________________________________________________
 ~ MIT License
 ~
 ~ Copyright 2012-2023 Open Text
 ~
 ~ The only warranties for products and services of Open Text and
 ~ its affiliates and licensors ("Open Text") are as may be set forth
 ~ in the express warranty statements accompanying such products and services.
 ~ Nothing herein should be construed as constituting an additional warranty.
 ~ Open Text shall not be liable for technical or editorial errors or
 ~ omissions contained herein. The information contained herein is subject
 ~ to change without notice.
 ~
 ~ Except as specifically indicated otherwise, this document contains
 ~ confidential information and a valid license is required for possession,
 ~ use or copying. If this work is provided to the U.S. Government,
 ~ consistent with FAR 12.211 and 12.212, Commercial Computer Software,
 ~ Computer Software Documentation, and Technical Data for Commercial Items are
 ~ licensed to the U.S. Government under vendor's standard commercial license.
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 ~ ___________________________________________________________________
  -->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <!--
      ~ [JENKINS-64639]: This table is only for drawing information. Also, the tr and td are removed by Jenkins core and the generated HTML doesn't contain it.
      -->
    <j:if test="${empty(descriptor.mcServers)}">
        <tr>
            <td/>
            <td colspan="2">
                <div class="help" style="display:block;">
                    ${%McServersAreNotDefined}
                </div>
            </td>
            <td/>
        </tr>
    </j:if>

    <st:bind var="upload" value="${descriptor}"/>

    <style>
    .refreshDiv {
        width: 100%;
        display: flex;
        justify-content: space-between;
    }
    .drop-down-box {
        width: 89%;
        vertical-align: middle;
    }
    .mcRefreshButton{
        width: 10%;
        height: 1.8em;
        margin: 0;
        vertical-align: middle;
    }
    </style>

    <script type="text/javascript">
        function useAuthentication(obj){
            if(obj.checked){
                document.getElementsByName("uploadApp.fsProxyUserName")[0].disabled=null;
                document.getElementsByName("uploadApp.fsProxyPassword")[0].disabled=null;
            }else{
                document.getElementsByName("uploadApp.fsProxyUserName")[0].disabled="true";
                document.getElementsByName("uploadApp.fsProxyPassword")[0].disabled="true";
            }
        }

        function refreshWorkspaces(event,upload){
              var saveWorkspace = event.target.previousElementSibling.value;
              var mcUrl = document.getElementsByName("uploadApp.mcServerName")[0].value;
              var authType = document.querySelector('input[name$="authModel"]:checked').value;
              var mcUserName = document.getElementsByName("uploadApp.mcUserName")[0].value;
              var mcPassword = document.getElementsByName("uploadApp.mcPassword")[0].value;
              var mcTenantId = document.getElementsByName("uploadApp.mcTenantId")[0].value;
              var mcExecToken = document.getElementsByName("uploadApp.mcExecToken")[0].value;
              var useProxy = document.getElementsByName("proxySettings")[0].checked;
              var proxyAddress = document.getElementsByName("uploadApp.fsProxyAddress")[0].value;
              var useAuthentication = document.getElementsByName("uploadApp.fsUseAuthentication")[0].checked;
              var proxyUserName = document.getElementsByName("uploadApp.fsProxyUserName")[0].value;
              var proxyPassword = document.getElementsByName("uploadApp.fsProxyPassword")[0].value;
              upload.getMcWorkspaces(mcUrl, authType, mcUserName, mcPassword, mcTenantId, mcExecToken, useProxy, proxyAddress, useAuthentication, proxyUserName, proxyPassword, function (r) {
                     const workspaces = r.responseJSON;
                     var str = renderWorkspaces(workspaces,saveWorkspace);
                     event.target.previousElementSibling.innerHTML= str;
              });
        }

        var renderWorkspaces = function (workspaces, saveWorkspace){
             let str = "";
             workspaces.forEach((item) => {
                  if(saveWorkspace == ""){
                       if(item.name == "Shared assets"){
                             str = str + "<option value=" + item.uuid.toString() + " selected=" + true + ">" + item.name + "</option>";
                       }else{
                             str = str + "<option value=" + item.uuid.toString() + ">" + item.name + "</option>";
                       }
                  }else{
                       if(item.uuid == saveWorkspace){
                             str = str + "<option value=" + item.uuid.toString() + " selected=" + true + ">" + item.name + "</option>";
                       }else{
                             str = str + "<option value=" + item.uuid.toString() + ">" + item.name + "</option>";
                       }
                  }
             });
             return str;
        }

        window.addEventListener("load", (event) => {
           var mcUrl = document.getElementsByName("uploadApp.mcServerName")[0].value;
           var authType = document.querySelector('input[name$="authModel"]:checked').value;
           var mcUserName = document.getElementsByName("uploadApp.mcUserName")[0].value;
           var mcPassword = document.getElementsByName("uploadApp.mcPassword")[0].value;
           var mcTenantId = document.getElementsByName("uploadApp.mcTenantId")[0].value;
           var mcExecToken = document.getElementsByName("uploadApp.mcExecToken")[0].value;
           var useProxy = document.getElementsByName("proxySettings")[0].checked;
           var proxyAddress = document.getElementsByName("uploadApp.fsProxyAddress")[0].value;
           var useAuthentication = document.getElementsByName("uploadApp.fsUseAuthentication")[0].checked;
           var proxyUserName = document.getElementsByName("uploadApp.fsProxyUserName")[0].value;
           var proxyPassword = document.getElementsByName("uploadApp.fsProxyPassword")[0].value;
           upload.getMcWorkspaces(mcUrl, authType, mcUserName, mcPassword, mcTenantId, mcExecToken, useProxy, proxyAddress, useAuthentication, proxyUserName, proxyPassword, function (r){
                  const workspaces = r.responseJSON;
                  let items = document.getElementsByClassName("mcRefreshButton");
                  let len = items.length;
                  if(len > 0){
                       Array.prototype.forEach.call(items, function (element) {
                              var saveWorkspace = element.previousElementSibling.value;
                              var str = renderWorkspaces(workspaces,saveWorkspace);
                              element.previousElementSibling.innerHTML= str;
                       });
                  }
            });
       })

    </script>

    <f:entry title="Digital Lab Server" field="mcServerName">
        <select name="uploadApp.mcServerName">
            <j:forEach var="mcServer" items="${descriptor.mcServers}">
                <f:option selected="${mcServer.mcServerName==instance.mCServerSettingsModel.mcServerName}" value="${mcServer.mcServerName}">
                    ${mcServer.mcServerName}
                </f:option>
            </j:forEach>
        </select>
    </f:entry>
    <f:entry field="authModel">
        <f:radioBlock name="authModel" value="token" checked="${instance.uploadAppModel.authType == 'token' || instance.uploadAppModel.authType == null}" title="Execution Token Authentication">
            <f:nested>
                <f:entry title="Access Key" field="mcExecToken">
                    <f:password name="uploadApp.mcExecToken" value="${instance.uploadAppModel.authModel.mcExecToken}" />
                </f:entry>
            </f:nested>
        </f:radioBlock>
        <f:radioBlock name="authModel" value="base" checked="${instance.uploadAppModel.authType == 'base'}" title="Base Authentication">
            <f:nested>
                <f:entry title="User name" field="mcUserName">
                    <f:textbox name="uploadApp.mcUserName" value="${instance.uploadAppModel.authModel.mcUserName}"/>
                </f:entry>
                <f:entry title="Password" field="mcPassword">
                    <f:password name="uploadApp.mcPassword" value="${instance.uploadAppModel.authModel.mcPassword}"/>
                </f:entry>
                <f:entry title="Tenant Id" field="mcTenantId">
                    <f:textbox name="uploadApp.mcTenantId" value="${instance.uploadAppModel.authModel.mcTenantId}"/>
                </f:entry>
            </f:nested>
        </f:radioBlock>
    </f:entry>
    <f:entry>
        <f:optionalBlock title="Use proxy settings" name = "proxySettings" checked="${instance.uploadAppModel.useProxy}">
            <f:entry title="Address" field="fsProxyAddress">
              <f:textbox name="uploadApp.fsProxyAddress" value="${instance.uploadAppModel.proxySettings.fsProxyAddress}"/>
            </f:entry>
            <f:entry>
                <f:checkbox title="Specify authentication" name="uploadApp.fsUseAuthentication" checked="${instance.uploadAppModel.useAuthentication}" onclick="useAuthentication(this)"/>
            </f:entry>
            <f:entry title="User name" field="fsProxyUserName">
              <f:textbox name="uploadApp.fsProxyUserName" disabled = "${instance.uploadAppModel.useAuthentication ? null : 'true'}" value="${instance.uploadAppModel.proxySettings.fsProxyUserName}"/>
            </f:entry>
            <f:entry title="Password" field="fsProxyPassword">
              <f:password name="uploadApp.fsProxyPassword" disabled = "${instance.uploadAppModel.useAuthentication ? null : 'true'}" value="${instance.uploadAppModel.proxySettings.fsProxyPassword}"/>
            </f:entry>
        </f:optionalBlock>
    </f:entry>

    <f:entry title="Applications List" field="applicationPaths">
        <f:repeatable var="app" items="${instance.uploadAppModel.applicationPaths}" add="Add Application" name="applicationPaths">
            <table width="100%">
                <f:entry title="Application path" field="mcAppPath">
                    <f:textbox value="${app.mcAppPath}" name="uploadApp.mcAppPath" />
                </f:entry>
                <f:entry title="Workspace for application" field="mcAppWorkspace">
                     <div class="refreshDiv">
                         <select class="drop-down-box" name="uploadApp.mcAppWorkspace">
                     	     <option value="${app.mcAppWorkspace}">${app.mcAppWorkspace}</option>
                         </select>
                         <input class="mcRefreshButton" type="button" value="Refresh" onclick="refreshWorkspaces(event,upload)"/>
                     </div>
                </f:entry>
                <f:entry>
                    <div align="right">
                        <f:repeatableDeleteButton value="Delete" />
                    </div>
                </f:entry>
            </table>
        </f:repeatable>
    </f:entry>
</j:jelly>